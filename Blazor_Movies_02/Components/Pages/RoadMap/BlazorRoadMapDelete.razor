@page "/blazorroadmap/delete"
@inject IDbContextFactory<Blazor_Movies_02.Data.BlazorMoviesRoadMap> DbFactory
<h3>BlazorRoadMapDelete</h3>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Model</h2>
    <hr />
    @if (model is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Id</dt>
            <dd class="col-sm-10">@model.Id</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Title Object</dt>
            <dd class="col-sm-10">@model.TitleObject</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description </dt>
            <dd class="col-sm-10">@model.Description</dd>
        </dl>
        <EditForm method="post" Model="model" OnValidSubmit="DeleteModel" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(model is null)">Delete</button> |
            <a href="/blazorroadmap">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private RoadMap? model;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        model = await context.RoadMap.FirstOrDefaultAsync(m => m.Id == Id);

        if (model is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteModel()
    {
        using var context = DbFactory.CreateDbContext();
        context.RoadMap.Remove(model!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/blazorroadmap");
    }
}
